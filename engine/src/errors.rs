pub use aurora_engine_types::parameters::engine::errors::{
    ERR_CALL_TOO_DEEP, ERR_CREATE_COLLISION, ERR_CREATE_CONTRACT_LIMIT, ERR_CREATE_EMPTY,
    ERR_DESIGNATED_INVALID, ERR_INVALID_CODE, ERR_INVALID_JUMP, ERR_INVALID_RANGE, ERR_MAX_NONCE,
    ERR_NOT_ALLOWED, ERR_OUT_OF_FUND, ERR_OUT_OF_GAS, ERR_OUT_OF_OFFSET, ERR_REVERT,
    ERR_STACK_OVERFLOW, ERR_STACK_UNDERFLOW,
};

pub const ERR_BALANCE_OVERFLOW: &[u8] = b"ERR_BALANCE_OVERFLOW";
pub const ERR_CONNECTOR_STORAGE_KEY_NOT_FOUND: &[u8] = b"ERR_CONNECTOR_STORAGE_KEY_NOT_FOUND";
pub const ERR_DECODING_TOKEN: &[u8] = b"ERR_DECODING_TOKEN";
pub const ERR_FIXED_GAS_OVERFLOW: &[u8] = b"ERR_FIXED_GAS_OVERFLOW";
pub const ERR_FUNCTION_CALL_KEY_NOT_FOUND: &[u8] = b"ERR_FUNCTION_CALL_KEY_NOT_FOUND";
pub const ERR_GAS_ETH_AMOUNT_OVERFLOW: &[u8] = b"ERR_GAS_ETH_AMOUNT_OVERFLOW";
pub const ERR_GAS_OVERFLOW: &[u8] = b"ERR_GAS_OVERFLOW";
pub const ERR_GETTING_ERC20_FROM_NEP141: &[u8] = b"ERR_GETTING_ERC20_FROM_NEP141";
pub const ERR_INCORRECT_NONCE: &[u8] = b"ERR_INCORRECT_NONCE";
pub const ERR_INTRINSIC_GAS: &[u8] = b"ERR_INTRINSIC_GAS";
pub const ERR_INVALID_ACCOUNT_ID: &[u8] = b"ERR_INVALID_ACCOUNT_ID";
pub const ERR_INVALID_AMOUNT: &[u8] = b"ERR_INVALID_AMOUNT";
pub const ERR_INVALID_CHAIN_ID: &[u8] = b"ERR_INVALID_CHAIN_ID";
pub const ERR_INVALID_ECDSA_SIGNATURE: &[u8] = b"ERR_INVALID_ECDSA_SIGNATURE";
pub const ERR_INVALID_NEP141_ACCOUNT_ID: &[u8] = b"ERR_INVALID_NEP141_ACCOUNT_ID";
pub const ERR_INVALID_SENDER: &[u8] = b"ERR_INVALID_SENDER";
pub const ERR_INVALID_UPGRADE: &[u8] = b"ERR_INVALID_UPGRADE";
pub const ERR_KEY_MANAGER_IS_NOT_SET: &[u8] = b"ERR_KEY_MANAGER_IS_NOT_SET";
pub const ERR_MAX_PRIORITY_FEE_GREATER: &[u8] = b"ERR_MAX_PRIORITY_FEE_GREATER";
pub const ERR_NEP141_NOT_FOUND: &[u8] = b"ERR_NEP141_NOT_FOUND";
pub const ERR_NEP141_TOKEN_ALREADY_REGISTERED: &[u8] = b"ERR_NEP141_TOKEN_ALREADY_REGISTERED";
pub const ERR_NO_AVAILABLE_BALANCE: &[u8] = b"ERR_NO_AVAILABLE_BALANCE";
pub const ERR_NO_UPGRADE: &[u8] = b"ERR_NO_UPGRADE";
pub const ERR_NOT_ALLOWED_TOO_EARLY: &[u8] = b"ERR_NOT_ALLOWED:TOO_EARLY";
pub const ERR_NOT_ENOUGH_BALANCE: &[u8] = b"ERR_NOT_ENOUGH_BALANCE";
pub const ERR_NOT_OWNER: &[u8] = b"ERR_NOT_OWNER";
pub const ERR_NOT_SUPPORTED: &[u8] = b"ERR_NOT_SUPPORTED";
pub const ERR_OVERFLOW_NUMBER: &[u8] = b"ERR_OVERFLOW_NUMBER";
pub const ERR_PARSE_ADDRESS: &[u8] = b"ERR_PARSE_ADDRESS";
pub const ERR_PAUSED: &[u8] = b"ERR_PAUSED";
pub const ERR_PROMISE_COUNT: &[u8] = b"ERR_PROMISE_COUNT";
pub const ERR_REFUND_FAILURE: &[u8] = b"ERR_REFUND_FAILURE";
pub const ERR_REJECT_CALL_WITH_CODE: &[u8] = b"ERR_REJECT_CALL_WITH_CODE";
pub const ERR_RUNNING: &[u8] = b"ERR_RUNNING";
pub const ERR_SAME_KEY_MANAGER: &[u8] = b"ERR_SAME_KEY_MANAGER";
pub const ERR_SAME_OWNER: &[u8] = b"ERR_SAME_OWNER";
pub const ERR_TOKEN_NO_VALUE: &[u8] = b"ERR_TOKEN_NO_VALUE";
pub const ERR_UNHANDLED_INTERRUPT: &[u8] = b"ERR_UNHANDLED_INTERRUPT";
pub const ERR_WRONG_TOKEN_TYPE: &[u8] = b"ERR_WRONG_TOKEN_TYPE";

pub const ERR_ARGS: &str = "ERR_ARGS";
pub const ERR_BORSH_DESERIALIZE: &str = "ERR_BORSH_DESERIALIZE";
pub const ERR_JSON_DESERIALIZE: &str = "ERR_JSON_DESERIALIZE";
pub const ERR_SERIALIZE: &str = "ERR_SERIALIZE";
