[config]
default_to_workspace = false
skip_core_tasks = true

[env]
CARGO = "cargo"
ENGINE_CARGO_TARGET = "wasm32-unknown-unknown"
CARGO_FEATURES_BUILD = "contract"
CARGO_FEATURES_BUILD_TEST = "contract,integration-test"
RUSTC_FLAGS_BUILD = "-C link-arg=-s"
WASM_FILE = "aurora-engine.wasm"
WASM_FILE_TEST = "aurora-engine-test.wasm"
XCC_ROUTER_WASM_FILE = "aurora-xcc-router.wasm"
SWEEP_DAYS = 30
BUILDER_HASH_COMMIT = "13430592a7be246dd5a29439791f4081e0107ff3" # https://hub.docker.com/r/nearprotocol/contract-builder/tags

[tasks.sweep]
category = "Cleanup"
install_crate = "cargo-sweep"
command = "${CARGO}"
args = [
    "sweep",
    "--time",
    "${SWEEP_DAYS}",
]

[tasks.clean-cargo]
category = "Cleanup"
command = "${CARGO}"
args = ["clean"]

[tasks.clean-contracts]
category = "Cleanup"
script = '''
rm -Rf etc/eth-contracts/.pnp
rm -Rf etc/eth-contracts/artifacts
rm -Rf etc/eth-contracts/cache
rm -Rf etc/tests/benchmark-contract/target
rm -Rf etc/tests/ft-receiver/target
rm -Rf etc/tests/self-contained-5bEgfRQ/target
rm -Rf etc/xcc-router/target
'''

[tasks.clean-bin]
category = "Cleanup"
script = '''
rm -Rf bin
'''

[tasks.clean-flow]
category = "Cleanup"
dependencies = [
    "clean-cargo",
    "clean-contracts",
    "clean-bin",
]

[tasks.clean]
run_task = "clean-flow"

[tasks.fmt]
category = "Formatting"
command = "${CARGO}"
args = [
    "fmt",
    "--all",
]

[tasks.udeps]
category = "Check"
env = { "CARGO_MAKE_CRATE_INSTALLATION_LOCKED" = "true" }
toolchain = "nightly"
install_crate = { crate_name = "cargo-udeps", binary = "cargo", min_version = "0.1.55", test_arg = ["udeps", "-h"], force = true }
command = "${CARGO}"
args = [
    "udeps",
    "--workspace",
    "--all-targets",
]

[tasks.clippy-base]
category = "Check"
command = "${CARGO}"
args = [
    "clippy",
    "--workspace",
    "--all-targets",
    "--",
    "-D",
    "warnings",
    "-D",
    "clippy::as_conversions",
]

[tasks.clippy-contract]
extend = "clippy-base"
args = [
    "clippy",
    "--workspace",
    "--all-targets",
    "--features",
    "contract",
    "--",
    "-D",
    "warnings",
    "-D",
    "clippy::as_conversions",
]

[tasks.clippy-contract-refund]
extend = "clippy-base"
args = [
    "clippy",
    "--workspace",
    "--all-targets",
    "--features",
    "contract,error_refund",
    "--",
    "-D",
    "warnings",
    "-D",
    "clippy::as_conversions",
]

[tasks.clippy]
dependencies = [
    "clippy-base",
    "clippy-contract",
    "clippy-contract-refund",
]

[tasks.check-fmt]
category = "Check"
command = "${CARGO}"
args = [
    "fmt",
    "--",
    "--check",
]

[tasks.check-contracts]
category = "Check"
script = '''
cd etc/eth-contracts
yarn
yarn lint
'''

[tasks.check]
category = "Check"
dependencies = [
    "check-contracts",
    "check-fmt",
    "clippy",
    "udeps",
]

[tasks.post-engine-build-env]
category = "Tools"
script = '''
echo "Environment:"
echo "    CARGO_MAKE_PROFILE:   ${CARGO_MAKE_PROFILE}"
echo "    CARGO_FEATURES:       ${CARGO_FEATURES}"
echo "    WASM_FILE:            ${WASM_FILE}"
echo "    SIZE_WASM_FILE:       $(wc -c bin/${WASM_FILE} | awk '{print $1}')"
echo "    TARGET_DIR:           ${TARGET_DIR}"
echo "    RUSTFLAGS:            ${RUSTFLAGS}"
echo "    Extra build args:     ${RELEASE} ${@}"
'''

[tasks.post-xcc-router-build-env]
category = "Tools"
script = '''
echo "Environment:"
echo "    CARGO_MAKE_PROFILE:   ${CARGO_MAKE_PROFILE}"
echo "    CARGO_FEATURES:       ${CARGO_FEATURES}"
echo "    WASM_FILE:            ${XCC_ROUTER_WASM_FILE}"
echo "    SIZE_WASM_FILE:       $(wc -c bin/${XCC_ROUTER_WASM_FILE} | awk '{print $1}')"
echo "    TARGET_DIR:           ${TARGET_DIR}"
echo "    RUSTFLAGS:            ${RUSTFLAGS}"
echo "    Extra build args:     ${RELEASE} ${@}"
'''

[tasks.copy-engine-build]
category = "Post"
command = "cp"
args = [
    "target/wasm32-unknown-unknown/${TARGET_DIR}/aurora_engine.wasm",
    "bin/${WASM_FILE}",
]

[tasks.copy-xcc-router-build]
category = "Post"
command = "cp"
args = [
    "etc/xcc-router/target/wasm32-unknown-unknown/${TARGET_DIR}/xcc_router.wasm",
    "bin/${XCC_ROUTER_WASM_FILE}",
]

[tasks.make-bin-directory]
category = "Post"
command = "mkdir"
args = [
    "-p",
    "bin",
]

[tasks.build-contracts]
category = "Build"
script = '''
cd etc/eth-contracts
yarn
yarn build
'''

[tasks.build-engine]
category = "Build"
command = "${CARGO}"
args = [
    "build",
    "--target",
    "${ENGINE_CARGO_TARGET}",
    "@@remove-empty(RELEASE)",
    "--no-default-features",
    "--features=${CARGO_FEATURES}",
    "-p",
    "aurora-engine"
]

[tasks.build-engine-flow]
category = "Build"
dependencies = [
    "build-contracts",
    "build-engine",
    "make-bin-directory",
    "copy-engine-build",
    "wasm-opt",
    "post-engine-build-env",
]

[tasks.build-engine-flow-docker]
category = "Build"
dependencies = [
    "build-engine",
    "make-bin-directory",
    "copy-engine-build",
    "wasm-opt",
    "post-engine-build-env",
]

[tasks.build-xcc-router-inner]
category = "Build"
env = { "RUSTFLAGS" = "-C strip=symbols --remap-path-prefix ${HOME}=/path/to/home/ --remap-path-prefix ${PWD}=/path/to/source/", "RELEASE" = "--release", "TARGET_DIR" = "release" }
script = '''
cd etc/xcc-router
cargo build --target ${ENGINE_CARGO_TARGET} --release
cd ../..
'''

[tasks.build-xcc-router]
category = "Build"
dependencies = [
    "build-xcc-router-inner",
    "make-bin-directory",
    "copy-xcc-router-build",
    "wasm-opt-xcc-router",
    "post-xcc-router-build-env",
]

[tasks.build-xcc-router-flow-docker]
category = "Build"
alias = "build-xcc-router"

[tasks.build-test]
env = { "RUSTFLAGS" = "${RUSTC_FLAGS_BUILD}", "CARGO_FEATURES" = "${CARGO_FEATURES_BUILD_TEST}", "WASM_FILE" = "${WASM_FILE_TEST}", "RELEASE" = "--release", "TARGET_DIR" = "release" }
category = "Build"
run_task = "build-engine-flow"

[tasks.wasm-opt-common]
category = "Build"
script = '''
  filesize_before=$(wc -c bin/${CONTRACT_FILE} | awk '{print $1}')
  wasm-opt -O4 bin/${CONTRACT_FILE} -o bin/${CONTRACT_FILE} --strip-debug --vacuum
  filesize_after=$(wc -c bin/${CONTRACT_FILE} | awk '{print $1}')
  echo "File size before: [$filesize_before] and after: [$filesize_after]"
'''

[tasks.wasm-opt]
env = { "CONTRACT_FILE" = "${WASM_FILE}" }
category = "Build"
run_task = "wasm-opt-common"

[tasks.wasm-opt-xcc-router]
env = { "CONTRACT_FILE" = "${XCC_ROUTER_WASM_FILE}" }
category = "Build"
run_task = "wasm-opt-common"

[tasks.build]
env = { "RUSTFLAGS" = "-C strip=symbols --remap-path-prefix ${HOME}=/path/to/home/ --remap-path-prefix ${PWD}=/path/to/source/", "CARGO_FEATURES" = "${CARGO_FEATURES_BUILD}", "RELEASE" = "--release", "TARGET_DIR" = "release" }
category = "Build"
run_task = "build-engine-flow"

[tasks.build-docker-inner]
env = { "RUSTFLAGS" = "-C strip=symbols --remap-path-prefix ${HOME}=/path/to/home/ --remap-path-prefix ${PWD}=/path/to/source/", "CARGO_FEATURES" = "${CARGO_FEATURES_BUILD}", "RELEASE" = "--release", "TARGET_DIR" = "release" }
category = "Build"
run_task = "build-engine-flow-docker"

[tasks.build-docker]
category = "Build"
script = '''
docker run --volume $PWD:/host -w /host -i --rm nearprotocol/contract-builder:master-${BUILDER_HASH_COMMIT}-amd64 ./scripts/docker-entrypoint.sh ${PROFILE}
'''

[tasks.build-xcc-router-docker-inner]
env = { "RUSTFLAGS" = "-C strip=symbols --remap-path-prefix ${HOME}=/path/to/home/ --remap-path-prefix ${PWD}=/path/to/source/", "CARGO_FEATURES" = "${CARGO_FEATURES_BUILD}", "RELEASE" = "--release", "TARGET_DIR" = "release" }
category = "Build"
run_task = "build-xcc-router-flow-docker"

[tasks.build-xcc-docker]
category = "Build"
script = '''
docker run --volume $PWD:/host -w /host -i --rm nearprotocol/contract-builder:master-${BUILDER_HASH_COMMIT}-amd64 ./scripts/docker-xcc-router-entrypoint.sh
'''

[tasks.test-contracts]
category = "Test"
dependencies = ["build-contracts"]
script = '''
cd etc/eth-contracts
yarn
yarn test
'''

[tasks.set-env-macos]
condition = { platforms = ["mac"] }
env = { "RUSTC_FLAGS_EXPORT_DYNAMIC" = "-C link-args=-rdynamic", "RUSTC_FLAGS_ALLOW_UNDEFINED" = "-C link-arg=-undefined -C link-arg=dynamic_lookup", "LIB_EXT" = "dylib" }

[tasks.set-env-linux]
condition = { platforms = ["linux"] }
env = { "RUSTC_FLAGS_EXPORT_DYNAMIC" = "-C link-arg=-Wl,--export-dynamic", "RUSTC_FLAGS_ALLOW_UNDEFINED" = "", "LIB_EXT" = "so" }

[tasks.build-dynamic-lib]
category = "Test"
dependencies = ["set-env-linux", "set-env-macos"]
env = { "RUSTFLAGS" = "${RUSTC_FLAGS_ALLOW_UNDEFINED}" }
command = "${CARGO}"
args = ["build", "--package=aurora-engine-native", "--release", "--features=integration-test"]

[tasks.copy-dynamic-lib]
command = "cp"
dependencies = ["build-dynamic-lib"]
args = [
    "target/release/libaurora_engine_native.${LIB_EXT}",
    "bin/libaurora-engine-native.${LIB_EXT}",
]

[tasks.test-workspace]
category = "Test"
env = { "RUSTFLAGS" = "${RUSTC_FLAGS_EXPORT_DYNAMIC} ${RUSTC_FLAGS_ALLOW_UNDEFINED}" }
command = "${CARGO}"
dependencies = ["build-test", "set-env-linux", "set-env-macos", "copy-dynamic-lib", "clone-aurora-eth-connector"]
args = [
    "test",
    "--package=aurora-engine-tests",
    "${@}",
]

[tasks.bench-modexp-test]
category = "Test"
command = "${CARGO}"
args = [
    "test",
    "--release",
    "bench_m",
    "--",
    "--ignored",
]

[tasks.clone-aurora-eth-connector]
category = "Build"
script = '''
AURORA_ETH_CONNECTOR_DIR="engine-tests-connector/etc/aurora-eth-connector/"
AURORA_ETH_CONNECTOR_ETC="engine-tests-connector/etc/"
AURORA_ETH_CONNECTOR_REPO_NAME="aurora-eth-connector"
AURORA_ETH_CONNECTOR_REPO="https://github.com/Near-One/$AURORA_ETH_CONNECTOR_REPO_NAME"
if [ -d $AURORA_ETH_CONNECTOR_DIR ]; then
  cd $AURORA_ETH_CONNECTOR_DIR
  echo "Pull Aurora Eth-Connector repo"
  git pull origin master
else
  mkdir $AURORA_ETH_CONNECTOR_ETC || true
  cd $AURORA_ETH_CONNECTOR_ETC
  echo "Clone Aurora Eth-Connector repo: "$AURORA_ETH_CONNECTOR_REPO
  git clone --depth 1 $AURORA_ETH_CONNECTOR_REPO
fi
'''

[tasks.test-flow]
category = "Test"
dependencies = [
    "test-contracts",
    "test-workspace",
]

[tasks.bench-modexp]
category = "Test"
dependencies = [
    "build-test",
    "bench-modexp-test",
]

[tasks.test]
category = "Test"
dependencies = [
    "test-flow",
    "bench-modexp-test",
]

[tasks.default]
run_task = "build"
